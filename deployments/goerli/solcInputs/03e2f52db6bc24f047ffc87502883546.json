{
  "language": "Solidity",
  "sources": {
    "contracts/Donation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n/// @title Donate Funds\n/// @author Mazen Jamshed\n/// @notice Only use on testnet. Not fully tested yet\n\ncontract Donation {\n    mapping(address => uint256) public addressToAmountDonated; // amount donated by an address\n\n    address private owner; // Deployer\n    address[] public supporters; // Array of donators\n\n    AggregatorV3Interface internal priceFeed;\n\n    constructor(AggregatorV3Interface feedAddress) {\n        owner = msg.sender;\n        priceFeed = AggregatorV3Interface(feedAddress);\n    }\n\n    function decimals() public view returns (uint8 decimalPlaces) {\n        return priceFeed.decimals();\n    }\n\n    function getEthPrice() public view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n\n        return uint256(answer * (10000000000)); // answer * 1 to the power of 10 to get 18 digit decimal\n    }\n\n    function checkMinimumInUsd(uint256 ethAmount)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 currentEth = getEthPrice(); // current eth price with 18 decimals\n\n        uint256 ethAmountInUsd = (currentEth * ethAmount) /\n            (1000000000000000000);\n        return ethAmountInUsd;\n    }\n\n    // };\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not the owner!\");\n        _;\n    }\n\n    function passOwnership(address payable newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    //* Minimum amount 50$\n    function Donate() public payable {\n        addressToAmountDonated[msg.sender] += msg.value;\n        supporters.push(msg.sender);\n    }\n\n    function widthdraw() public payable onlyOwner {\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
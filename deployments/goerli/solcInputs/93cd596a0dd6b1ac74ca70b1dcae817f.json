{
  "language": "Solidity",
  "sources": {
    "contracts/Donation.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.7;\n\n/// @title Donate Funds\n/// @author Mazen Jamshed\n/// @notice Only use on testnet. Not fully tested yet\n\ncontract Donation {\n    mapping(address => uint256) public addressToAmountDonated; // amount donated by an address\n\n    address private owner; // Deployer\n    address[] public supporters; // Array of donators\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not the owner!\");\n        _;\n    }\n\n    function passOwnership(address payable newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n\n    function Donate() public payable {\n        addressToAmountDonated[msg.sender] += msg.value;\n        supporters.push(msg.sender);\n    }\n\n    function widthdraw() public payable onlyOwner {\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}